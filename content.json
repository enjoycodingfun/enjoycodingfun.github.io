[{"title":"Nginx笔记0","date":"2020-03-04T06:46:54.804Z","path":"2020/03/04/Nginx笔记0/","text":"主题词: 负载均衡 什么是负载均衡 负载均衡，英文名称为Load Balance，其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。 负载均衡是建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。 软件级负载均衡 常见的硬件有比较昂贵的NetScaler、F5、Radware和Array等商用的负载均衡器，它的优点就是有专业的维护团队来对这些服务进行维护、缺点就是花销太大 LVS/HAProxy、Nginx的基于Linux的开源免费的负载均衡软件策略,这些都是通过软件级别来实现，所以费用非常低廉，所以推荐大家采用第二种方案来实施自己网站的负载均衡需求 参见：http://network.51cto.com/art/201110/298992.htm Nginx是什么？ Nginx (engine x) 是一款轻量级的高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点开发的。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。 反向代理（Reverse Proxy）方式是指以代理服务器来接受互联网上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给互联网上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。 正向代理隐藏了访问者的IP等信息（服务器端–代理服务器端–客户端） 反向代理隐藏了被访问者的IP等信息（客户端–代理服务器端–服务器端） Nginx的应用场景 HTTP服务器：可以独立提供HTTP服务器，可以做网页静态服务器。如：图片服务器 虚拟主机：可以实现在一台服务器虚拟出多个网站，例如个人网站使用的虚拟主机 反向代理：当网站的访问量上升，单台服务器不能满足用户的请求时，需要用多台服务器集群，可以使用Nginx做反向代理 负载均衡：多台服务器平均分担负载，不会因为某台服务器负载高而宕机，某台服务器闲置等情况","tags":[]},{"title":"妈妈购JAVA开发代码规范 (2)","date":"2020-03-02T06:36:24.934Z","path":"2020/03/02/妈妈购JAVA开发代码规范 (2)/","text":"妈妈购JAVA开发代码规范1.强制约束(1)实体类或DTO等中涉及到type或state的类型需要在Javadoc中注释中标明所有的已知枚举值，同时指明引用的Constant或者Enum类。 示例：/*** 售后状态，其他描述....** @see RefundOrderStateEnum 常量类引用* @see OrderServiceApiImpl*/private Integer refundState; image.png (2)实体类或DTO等中涉及到其他表的字段，①外键，命名为实体名 + Id （如：OrderEntity 其他的外键为 orderId）**②冗余字段，命名为与原表字段保持一致，存在重复使用实体名+字段名，需要写出冗余数据同步机制****必须注释中标明是那张表的主键或冗余字段** /** 会员Id 会员表主键：t_mem_member 会员表冗余字段：t_mem_member （同步方法：原表数据变化时及时更新当前表数据， 定时同步） /private Long memberId; (3)if-elseif 中涉及到 三个及以上的判断条件时， 需要标明注释和条件换行** image.png (4)新设计的数据库表，必须包含以下字段：（hiddenMemo、creatorId、createdTime、lastModifierId、lastModifiedTime、deletedFlag、version），所有对实体表的查询必须限制deletedFlag=0 为条件hiddenMemo在代码中不使用，只用于订数据备注。 (5)Lambad表达式禁止超过3个表达式，如果超出需要分成多段， 建议在项目不使用Lambad表达式 (6)一个方法中的代码行数不得多于200行，如超出需要进行封装私有方法，所有在调用该私有方法出需要写明注释该方法的用处，同时需要使用this.进行调用 (7)未被调用的private field 和private method必须删除。 (8)禁止在循环或递归中调用接口（Dao、service、api等） (9)禁止使用魔法值，统一定义为枚举或者常量类 (10)全项目禁止出现System.out.print()，统一使用log (11)SelectList &amp; selectCount（即EntityWrapper）的不允许出现在service中，需要通过repository进行中转一下 (12)reponse返回前端时不允许出现宽泛的单词，”Id”、“name”最为典型，必须使用业务对象+id，如：itemId、memberId。 也不允许多种定义规则如：商品Id，使用itemId、goodsId、productId等，统一为itemId。 2.参数命名约束 包结构规范.jpg 单体服务类调用关系图.jpg 3.URL命名约束4.注释约束(1)类注释（Javadoc） 每个类必须类注释可以不写作者名和日期，因为Git已经记录下了这些信息 image.png (2)方法级注释（Javadoc） image.png 方法名含义明确的话，可以不写方法注释打算说明参数、返回值、异常的含义时，必须用tag注解；当参数或是返回值的含义比较明确时，也可以不写tag，但禁止出现下图那样多余的写法 image.png 注意tag的用法@param 形参名 注释@return 注释@throws 异常类型 注释 (3)字段注释（Javadoc） image.png 单词含义明确的话，可以不写字段注释必须使用/** */，禁止使用 //，禁止使用 /_ _/ 5.数据库规范（1）主键 主键必须使用 bigint 不能使用 unsigned ，不能使用无符号，因为 Long 类型的容量不足以支撑 unsigned bigint, 同理 使用 unsigned int 也不能使用 Integer 映射","tags":[]},{"title":"妈妈购JAVA开发代码规范","date":"2020-03-02T06:27:57.170Z","path":"2020/03/02/妈妈购JAVA开发代码规范/","text":"妈妈购JAVA开发代码规范 1.强制约束(1)实体类或DTO等中涉及到type或state的类型需要在Javadoc中注释中标明所有的已知枚举值，同时指明引用的Constant或者Enum类。 示例：/*** 售后状态，其他描述....** @see RefundOrderStateEnum 常量类引用* @see OrderServiceApiImpl*/private Integer refundState; image.png (2)实体类或DTO等中涉及到其他表的字段，①外键，命名为实体名 + Id （如：OrderEntity 其他的外键为 orderId）**②冗余字段，命名为与原表字段保持一致，存在重复使用实体名+字段名，需要写出冗余数据同步机制必须注释中标明是那张表的主键或冗余字段** /* 会员Id* 会员表主键：t_mem_member* 会员表冗余字段：t_mem_member （同步方法：原表数据变化时及时更新当前表数据， 定时同步）*/private Long memberId; (3)if-elseif 中涉及到 三个及以上的判断条件时， 需要标明注释和条件换行 image.png ** (4)新设计的数据库表，必须包含以下字段：（hiddenMemo、creatorId、createdTime、lastModifierId、lastModifiedTime、deletedFlag、version），所有对实体表的查询必须限制deletedFlag=0 为条件hiddenMemo在代码中不使用，只用于订数据备注。 (5)Lambad表达式禁止超过3个表达式，如果超出需要分成多段， 建议在项目不使用Lambad表达式 (6)一个方法中的代码行数不得多于200行，如超出需要进行封装私有方法，所有在调用该私有方法出需要写明注释该方法的用处，同时需要使用this.进行调用 (7)未被调用的private field 和private method必须删除。 (8)禁止在循环或递归中调用接口（Dao、service、api等） (9)禁止使用魔法值，统一定义为枚举或者常量类 (10)全项目禁止出现System.out.print()，统一使用log (11)SelectList &amp; selectCount（即EntityWrapper）的不允许出现在service中，需要通过repository进行中转一下 (12)reponse返回前端时不允许出现宽泛的单词，”Id”、“name”最为典型，必须使用业务对象+id，如：itemId、memberId。 也不允许多种定义规则如：商品Id，使用itemId、goodsId、productId等，统一为itemId。 2.参数命名约束 包结构规范.jpg](https://cdn.nlark.com/yuque/0/2019/jpeg/123079/1573637524500-88ecf5cc-02dd-4aa3-9f10-09aeab180b0c.jpeg#align=left&display=inline&height=2295&name=%E5%8C%85%E7%BB%93%E6%9E%84%E8%A7%84%E8%8C%83.jpg&originHeight=2295&originWidth=2085&size=463020&status=done&style=none&width=2085)![单体服务类调用关系图.jpg 3.URL命名约束 4.注释约束(1)类注释（Javadoc） 每个类必须类注释可以不写作者名和日期，因为Git已经记录下了这些信息 image.png (2)方法级注释（Javadoc） image.png 方法名含义明确的话，可以不写方法注释 打算说明参数、返回值、异常的含义时，必须用tag注解；当参数或是返回值的含义比较明确时，也可以不写tag，但禁止出现下图那样多余的写法 image.png 注意tag的用法@param 形参名 注释@return 注释@throws 异常类型 注释 (3)字段注释（Javadoc） image.png 单词含义明确的话，可以不写字段注释 必须使用/** */，禁止使用 //，禁止使用 /_ _/ 5.数据库规范（1）主键 主键必须使用 bigint 不能使用 unsigned ，不能使用无符号，因为 Long 类型的容量不足以支撑 unsigned bigint, 同理 使用 unsigned int 也不能使用 Integer 映射","tags":[]},{"title":"Nginx笔记2","date":"2020-03-02T04:51:17.620Z","path":"2020/03/02/Nginx笔记2/","text":"主题词: 高并发下Nginx反向代理、Nginx负载均衡 需求：配置Nginx的反向代理 [ fxdl.jpg](https://i.loli.net/2017/09/10/59b5253f6bd3e.jpg) 配置两台Tomcat服务器 配置两台Tomcat的端口分别是8087和8088 保证两台Tomcat服务器的三处端口不一致才能启动 启动8087端口打开Tomcat7，启动8088端口打开Tomcat8 配置Nginx反向代理服务器 修改配置文件 修改配置文件注意点 定义upstream tomcat7内的server需指向反向代理指向的服务器地址，分号结束不能忘。 定义location的proxy_pass为http://tomcat7，对应upstream的名称。 12345678910111213141516171819202122232425upstream manager&#123; server 192.168.31.159:8087; &#125; server &#123; listen 80; server_name manager.dhc.com; location &#x2F; &#123; proxy_pass http:&#x2F;&#x2F;manager; index index.html index.htm; &#125; &#125; upstream portal&#123; server 192.168.31.159:8088; &#125; server &#123; listen 80; server_name portal.dhc.com; location &#x2F; &#123; proxy_pass http:&#x2F;&#x2F;portal; index index.html index.htm; &#125; &#125; 重启并加载配置文件，并测试是否成功 需求：配置Nginx的负载均衡 配置文件的修改，其他同上个需求 12345678910111213upstream portal&#123; server 192.168.31.159:8087 weight&#x3D;2; server 192.168.31.159:8088; &#125; server &#123; listen 80; server_name portal.dhc.com; location &#x2F; &#123; proxy_pass http:&#x2F;&#x2F;portal; index index.html index.htm; &#125; &#125; 可以在upstream中配置权重weight=2（轮询）","tags":[]},{"title":"test","date":"2020-03-02T04:40:34.000Z","path":"2020/03/02/test/","text":"","tags":[]},{"title":"Hello World","date":"2020-01-19T02:41:36.386Z","path":"2020/01/19/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]